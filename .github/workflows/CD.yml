name: Cypress E2E testing and Deploy to Vultr

on:
  push:
    branches: ['main']

  pull_request:
    types: [opened, reopened]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  build:
    name: Check the code on Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine packager manager"
            exit 1
          fi
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Run build
        run: npm run build

  deploy:
    needs: build

    name: Deploy to Azure VM
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to Azure VM
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 5555
          script: |
            cd /home/farhan/app/portfolio-web || true
            git pull origin main || true
            npm install || true
            npm run build || true
            pm2 reload ecosystem.config.js || true

  # deploy:
  #   name: Deploy to Vercel
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3

  #     - name: Setup Node
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: '20'
  #         cache: npm

  #     - name: Restore cache
  #       uses: actions/cache@v3
  #       with:
  #         path: |
  #           .next/cache
  #         # Generate a new cache whenever packages or source files change.
  #         key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
  #         # If source files changed but packages didn't, rebuild from a prior cache.
  #         restore-keys: |
  #           ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

  #     - name: Install Vercel CLI
  #       run: npm install --global vercel@canary
  #     - name: Pull Vercel Environment Information
  #       run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
  #     - name: Build Project Artifacts
  #       run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
  #     - name: Deploy Project Artifacts to Vercel
  #       run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
